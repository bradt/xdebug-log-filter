#!/usr/bin/php
<?php
if ( !isset( $argv[1] ) ) {
	$script_name = basename( __FILE__ );
	echo "Usage: $script_name <config_file>.php\n";
	exit;
}

$config_file_path = dirname( __FILE__ ) . '/' . $argv[1];

if ( !file_exists( $config_file_path ) ) {
	echo "Could not find config file $config_file_path.\n";
	exit;
}

include $config_file_path;

if ( !is_array( $log_path ) ) {
    $log_path = array( $log_path );
}

$is_log_missing = false;
$log_paths = $log_path;
foreach ( $log_paths as $log_path ) {
    if ( !file_exists( $log_path ) ) {
        echo "Could not find log path $log_path.\n";
        $is_log_missing = true;
    }
}

if ( $is_log_missing ) {
    exit;
}

$log_path = implode( ' ', $log_paths );

function passes_filter( $block, $regexes ) {
	foreach ( $regexes as $regex ) {
		if ( preg_match( $regex, $block ) ) {
			return false;
		}
	}

	return true;
}

function is_trace_start( $line ) {
	return preg_match( '@^\[(.*?)\] PHP Stack trace:@', $line );
}

function is_trace_line( $line ) {
	return preg_match( '@^\[(.*?)\] PHP \s+[0-9]+\.@', $line );
}

$fp = popen( "tail -f -n 0 -q $log_path 2>&1", 'r' );

// Makes fgets() return immediately and doesn't wait for input
stream_set_blocking( $fp, 0 );

while ( !feof( $fp ) ) {

    sleep( 1 );

    $is_tracing = false;
    $block = '';

    while ( $line = fgets( $fp ) ) {

        if ( !is_trace_start( $line ) && !is_trace_line( $line ) ) {

            if ( $block && passes_filter( $block, $regexes ) ) {
                echo $block;
                system( 'tput bel 2>&1' );
            }

            $is_tracing = false;
            $block = $line;
            continue;
        }

        if ( $block && is_trace_start( $line ) ) {
            $is_tracing = true;
			$block .= $line;
            continue;
        }

        if ( $is_tracing && is_trace_line( $line ) ) {
            $block .= $line;
        }

    }
    
    if ( $block && passes_filter( $block, $regexes ) ) {
        echo $block;
    }

}

